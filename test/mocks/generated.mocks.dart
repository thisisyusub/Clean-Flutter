// Mocks generated by Mockito 5.2.0 from annotations
// in flutter_clean_tutorial/test/mocks/generated.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;
import 'dart:typed_data' as _i8;

import 'package:dio/dio.dart' as _i2;
import 'package:dio/src/options.dart' as _i7;
import 'package:flutter_clean_tutorial/core/either.dart' as _i3;
import 'package:flutter_clean_tutorial/core/error/failure.dart' as _i11;
import 'package:flutter_clean_tutorial/core/use_cases/use_case.dart' as _i14;
import 'package:flutter_clean_tutorial/features/posts/data/data_sources/remote/post_remote_data_source.dart'
    as _i15;
import 'package:flutter_clean_tutorial/features/posts/data/models/post_model.dart'
    as _i16;
import 'package:flutter_clean_tutorial/features/posts/domain/entities/post.dart'
    as _i17;
import 'package:flutter_clean_tutorial/features/posts/domain/repositories/post_repository.dart'
    as _i5;
import 'package:flutter_clean_tutorial/features/posts/domain/use_cases/fetch_posts.dart'
    as _i18;
import 'package:flutter_clean_tutorial/features/users/data/data_sources/remote/user_remote_data_source.dart'
    as _i9;
import 'package:flutter_clean_tutorial/features/users/domain/repositories/user_repository.dart'
    as _i4;
import 'package:flutter_clean_tutorial/features/users/domain/use_cases/fetch_users.dart'
    as _i13;
import 'package:flutter_clean_tutorial/shared/data/user_model.dart' as _i10;
import 'package:flutter_clean_tutorial/shared/domain/user.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponseBody_0 extends _i1.Fake implements _i2.ResponseBody {}

class _FakeEither_1<E, S> extends _i1.Fake implements _i3.Either<E, S> {}

class _FakeUserRepository_2 extends _i1.Fake implements _i4.UserRepository {}

class _FakePostRepository_3 extends _i1.Fake implements _i5.PostRepository {}

/// A class which mocks [HttpClientAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientAdapter extends _i1.Mock implements _i2.HttpClientAdapter {
  MockHttpClientAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.ResponseBody> fetch(
          _i7.RequestOptions? options,
          _i6.Stream<_i8.Uint8List>? requestStream,
          _i6.Future<dynamic>? cancelFuture) =>
      (super.noSuchMethod(
              Invocation.method(#fetch, [options, requestStream, cancelFuture]),
              returnValue:
                  Future<_i2.ResponseBody>.value(_FakeResponseBody_0()))
          as _i6.Future<_i2.ResponseBody>);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
}

/// A class which mocks [UserRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDataSource extends _i1.Mock
    implements _i9.UserRemoteDataSource {
  MockUserRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i10.UserModel>> fetchUsers() => (super.noSuchMethod(
          Invocation.method(#fetchUsers, []),
          returnValue: Future<List<_i10.UserModel>>.value(<_i10.UserModel>[]))
      as _i6.Future<List<_i10.UserModel>>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i4.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Either<_i11.Failure<String>, List<_i12.User>>> getUsers() =>
      (super.noSuchMethod(Invocation.method(#getUsers, []),
              returnValue: Future<
                      _i3.Either<_i11.Failure<String>, List<_i12.User>>>.value(
                  _FakeEither_1<_i11.Failure<String>, List<_i12.User>>()))
          as _i6.Future<_i3.Either<_i11.Failure<String>, List<_i12.User>>>);
}

/// A class which mocks [FetchUsers].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchUsers extends _i1.Mock implements _i13.FetchUsers {
  MockFetchUsers() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.UserRepository get userRepository =>
      (super.noSuchMethod(Invocation.getter(#userRepository),
          returnValue: _FakeUserRepository_2()) as _i4.UserRepository);
  @override
  _i6.Future<_i3.Either<_i11.Failure<String>, List<_i12.User>>> call(
          _i14.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<
                      _i3.Either<_i11.Failure<String>, List<_i12.User>>>.value(
                  _FakeEither_1<_i11.Failure<String>, List<_i12.User>>()))
          as _i6.Future<_i3.Either<_i11.Failure<String>, List<_i12.User>>>);
}

/// A class which mocks [PostRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostRemoteDataSource extends _i1.Mock
    implements _i15.PostRemoteDataSource {
  MockPostRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i16.PostModel>> fetchPosts([int? userId]) =>
      (super.noSuchMethod(Invocation.method(#fetchPosts, [userId]),
              returnValue:
                  Future<List<_i16.PostModel>>.value(<_i16.PostModel>[]))
          as _i6.Future<List<_i16.PostModel>>);
}

/// A class which mocks [PostRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostRepository extends _i1.Mock implements _i5.PostRepository {
  MockPostRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Either<_i11.Failure<String>, List<_i17.Post>>> getPosts(
          [int? userId]) =>
      (super.noSuchMethod(Invocation.method(#getPosts, [userId]),
              returnValue: Future<
                      _i3.Either<_i11.Failure<String>, List<_i17.Post>>>.value(
                  _FakeEither_1<_i11.Failure<String>, List<_i17.Post>>()))
          as _i6.Future<_i3.Either<_i11.Failure<String>, List<_i17.Post>>>);
}

/// A class which mocks [FetchPosts].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchPosts extends _i1.Mock implements _i18.FetchPosts {
  MockFetchPosts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.PostRepository get postRepository =>
      (super.noSuchMethod(Invocation.getter(#postRepository),
          returnValue: _FakePostRepository_3()) as _i5.PostRepository);
  @override
  _i6.Future<_i3.Either<_i11.Failure<String>, List<_i17.Post>>> call(
          [int? params]) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<
                      _i3.Either<_i11.Failure<String>, List<_i17.Post>>>.value(
                  _FakeEither_1<_i11.Failure<String>, List<_i17.Post>>()))
          as _i6.Future<_i3.Either<_i11.Failure<String>, List<_i17.Post>>>);
}
